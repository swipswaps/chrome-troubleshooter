[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "chrome-troubleshooter"
version = "1.0.0"
description = "Advanced Chrome crash diagnosis and auto-remediation tool for Linux systems"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "swipswaps", email = "swipswaps@users.noreply.github.com"}
]
maintainers = [
    {name = "swipswaps", email = "swipswaps@users.noreply.github.com"}
]
keywords = [
    "chrome",
    "chromium",
    "troubleshooting",
    "crash-diagnosis",
    "fedora",
    "linux",
    "auto-remediation",
    "diagnostics"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Desktop Environment",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities"
]
requires-python = ">=3.8"
dependencies = [
    "colorama>=0.4.4",
]

[project.optional-dependencies]
dev = [
    "black>=22.0.0",
    "pytest>=7.0.0",
    "pytest-mock>=3.6.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0"
]
all = [
    "chrome-troubleshooter[dev]"
]

[project.urls]
Homepage = "https://github.com/swipswaps/chrome-troubleshooter"
Repository = "https://github.com/swipswaps/chrome-troubleshooter.git"
Issues = "https://github.com/swipswaps/chrome-troubleshooter/issues"
Documentation = "https://github.com/swipswaps/chrome-troubleshooter#readme"

[project.scripts]
chrome-troubleshooter = "chrome_troubleshooter.cli:main"
ct = "chrome_troubleshooter.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["chrome_troubleshooter*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]
