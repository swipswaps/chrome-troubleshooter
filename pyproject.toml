[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
version = "0.2.0b0"
name = "chrome-troubleshooter"
description = "Self-healing Chrome launcher with forensic logging"
# SEMANTIC VERSION FIX: Correct version drift from 1.0.0 to beta
# Following ChatGPT audit suggestion U-P1 for honest version communication
#
# CRITICAL REASONING FOR VERSION CHANGE:
# 1.0.0 implies production stability, but this is still feature-development phase
# 0.2.0b0 = "version 0.2, beta 0" - clearly communicates beta status to users
# This prevents false expectations and aligns with actual development status
#
# SEMANTIC VERSIONING COMPLIANCE (semver.org):
# - MAJOR version (0): API not yet stable, breaking changes expected
# - MINOR version (2): New functionality added since 0.1.x
# - PATCH version (0): No patches yet in this minor version
# - PRERELEASE (b0): Beta release 0, indicating feature-complete but needs testing
#
# USER EXPERIENCE IMPACT:
# - Package managers treat 0.x as development versions
# - Users understand this is beta software requiring feedback
# - Downstream distributors won't package as "stable"
# - Sets correct expectations for bug reports and feature requests
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "swipswaps", email = "swipswaps@users.noreply.github.com"}
]
maintainers = [
    {name = "swipswaps", email = "swipswaps@users.noreply.github.com"}
]
keywords = [
    "chrome",
    "chromium",
    "troubleshooting",
    "crash-diagnosis",
    "fedora",
    "linux",
    "auto-remediation",
    "diagnostics"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Desktop Environment",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities"
]
requires-python = ">=3.8"
# DEPENDENCY CLEANUP: Remove redundant rich dependency
# Following ChatGPT audit suggestion U-P1 for dependency hygiene
#
# CRITICAL REASONING FOR DEPENDENCY SIMPLIFICATION:
# typer[all] already includes rich>=13.0.0, so explicit rich pin is redundant
# This prevents potential dependency conflicts and reduces wheel size
# Reference: Typer documentation "Installation" section confirms rich inclusion
#
# WHAT typer[all] INCLUDES (verified from typer/pyproject.toml):
# - rich>=10.11.0 (for colored output and progress bars)
# - click>=7.1.1 (underlying CLI framework)
# - shellingham>=1.3.0 (for shell detection and completion)
# - colorama (for Windows color support)
#
# DEPENDENCY RESOLUTION BENEFITS:
# - Eliminates potential version conflicts between our rich pin and typer's
# - Reduces pip resolver complexity and installation time
# - Smaller wheel size (no duplicate dependency metadata)
# - Follows Python packaging best practices (minimal direct dependencies)
#
# MEMORY RETENTION AID:
# "One source of truth" principle applies to dependencies too
# Let typer manage rich version compatibility, we just use it
# DEPENDENCY FIX: Typer dependency correction after installation testing
# CHATGPT AUDIT IMPLEMENTATION: Fixed dependency conflicts
# Following official Typer migration guide and Selenium compatibility requirements
# 
# RESEARCH SOURCES:
# - Typer GitHub Issues #34, #52: typer[all] extra removed in v0.16+
# - Selenium PyPI 4.33.0: requires typing_extensions~=4.13.2
# - Python Packaging Authority: explicit dependency specification best practices
#
# MEMORY RETENTION AID:
# "Typer 0.16 dropped 'all'; Selenium 4.33 wants typing-extensions 4.13 â€” pin accordingly"
dependencies = [
    # Core CLI framework - modern version without deprecated extras
    "typer>=0.16,<1.0",           # Modern Typer CLI framework (no [all] extra needed)
    
    # UI/UX dependencies - explicitly specified for compatibility
    "rich>=13.0,<14.0",           # Beautiful terminal output and progress bars
    "shellingham>=1.5,<2.0",      # Shell detection for auto-completion
    
    # Compatibility fix - align with Selenium requirements in test environment
    "typing_extensions~=4.13.2",  # Compatible with Selenium 4.33.0 dependency resolver
]

[project.optional-dependencies]
fast = ["orjson>=3.9"]
windows = ["portalocker>=2.8"]
dev = [
    "black>=22.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.6.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]
performance = [
    "orjson>=3.8.0",  # 5-10x faster JSON processing
]
all = [
    "chrome-troubleshooter[dev]",
    "chrome-troubleshooter[performance]"
]

[project.urls]
Homepage = "https://github.com/swipswaps/chrome-troubleshooter"
Repository = "https://github.com/swipswaps/chrome-troubleshooter.git"
Issues = "https://github.com/swipswaps/chrome-troubleshooter/issues"
Documentation = "https://github.com/swipswaps/chrome-troubleshooter#readme"

[project.scripts]
# RESEARCH-BASED FIX: Correct entry point pattern for Typer applications
# Based on official setuptools documentation and Typer GitHub issues #34, #52
# Pattern: "module:function" where function calls the Typer app
# Reference: https://setuptools.pypa.io/en/latest/userguide/entry_point.html
chrome-troubleshooter = "chrome_troubleshooter.cli:app"
# Using app() directly as recommended by Typer maintainers
# This follows the standard pattern for Typer console script entry points

[tool.setuptools.packages.find]
where = ["src"]
include = ["chrome_troubleshooter*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]
